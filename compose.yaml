# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/
version: '3'

# Here the instructions define your application as a service called "fastapi-app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  backend:
    container_name: lockerroom-platform-be
    build:
      context: .
    ports:
      - "8000"  # randomly expose external port
    env_file:
      - .env
    develop:  # automatically update running compose services as we edit and save code
      watch:
        - action: rebuild
          path: .
    # depends_on:
    #   db:
    #     condition: service_healthy
    # networks:
    #   app-network:
    #     ipv4_address: ...
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:  # bind nginx.conf in the root to nginx container
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:  # will be up after fastapi-app is up
      - fastapi-app
    ports:
      - "80:80"

# The `db-data` volume persists the database data between container restarts.
# The `db-password` secret is used to set the database password.
# You must create `db/password.txt` and add a password of your choosing to it before running `docker compose up`.
#   db:
#     image: postgres:latest  # using docker image available on docker registry
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# networks:
#   app-network:
#     ipam:  # ip address management
#       driver: default  # bridge
#         config:
#           - subnet: ""
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt
